mod commands;

use tracel_xtask::prelude::*;

#[macro_use]
extern crate log;

#[macros::base_commands(
    Bump,
    Check,
    Compile,
    Coverage,
    Doc,
    Dependencies,
    Publish,
    Test,
    Validate,
    Vulnerabilities
)]
pub enum Command {
    /// Example of extended Build command with an additional target called 'Frontend'
    Build(commands::build::ExtendedBuildCmdArgs),
    /// Example of a new command which extends a base command arguments
    ExtendedBuildArgs(commands::extended_build_args::ExtendedBuildArgsCmdArgs),
    /// Example of a new command which extends a base command arguments
    ExtendedBuildNewSubCommands(
        commands::extended_build_new_sub_commands::ExtendedBuildSubCommandsCmdArgs,
    ),
    /// Example of a new command which extends a base command sub commands
    ExtendedCheckSubcommands(commands::extended_check_sub_commands::ExtendedCheckedArgsCmdArgs),
    /// Example of a new command which extendeds target
    ExtendedTarget(commands::extended_target::ExtendedTargetCmdArgs),
    /// Comprehensive example of an extended Fix command with an additional target and subcommand
    Fix(commands::fix::ExtendedFixCmdArgs),
    /// Example of a new command with support of base Target
    MyCommand(commands::my_command::MyCommandCmdArgs),
    /// Example of a new command with subcommands
    MyCommandWithSubcommand(
        commands::my_command_with_sub_commands::MyCommandWithSubCommandsCmdArgs,
    ),
}

fn main() -> anyhow::Result<()> {
    let args = init_xtask::<Command>()?;
    match args.command {
        Command::Build(args) => commands::build::handle_command(args),
        Command::ExtendedBuildArgs(args) => commands::extended_build_args::handle_command(args),
        Command::ExtendedBuildNewSubCommands(args) => {
            commands::extended_build_new_sub_commands::handle_command(args)
        }
        Command::ExtendedCheckSubcommands(args) => {
            commands::extended_check_sub_commands::handle_command(args)
        }
        Command::ExtendedTarget(args) => commands::extended_target::handle_command(args),
        Command::Fix(args) => commands::fix::handle_command(args, None),
        Command::MyCommand(args) => commands::my_command::handle_command(args),
        Command::MyCommandWithSubcommand(args) => {
            commands::my_command_with_sub_commands::handle_command(args)
        }
        Command::Validate => commands::validate::handle_command(),
        // dispatch_base_commands function is generated by the commands macro
        _ => dispatch_base_commands(args),
    }?;
    Ok(())
}
